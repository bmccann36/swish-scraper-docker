Transform: AWS::Serverless-2016-10-31

Description: Fargate task that runs puppeteer

Parameters:

  VpcId:
    Type: String
    Default: vpc-00f5abb34300057db
  EcrImage:
    Type: String
    Default: '657117174612.dkr.ecr.us-east-1.amazonaws.com/swishscraper:latest'

Resources:

  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: 'swishScraper'
          #! HERE is where the image is defined
          Image: !Ref EcrImage
          Essential: true
          Environment:
            - Name: DynamoDBTable
              Value: 'swish-house-class-dates'
          #! CREATES LOG GROUP
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: 'true'
              awslogs-group: awslogs-swish-scraper
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: awslogs-swish-scraper
      NetworkMode: awsvpc
      Memory: '1024'
      Cpu: '512'

  # iam role for task
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: dynamodb-table-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGet*
                  - dynamodb:DescribeStream
                Resource: '*'

  ECSCluster:
    Type: AWS::ECS::Cluster

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref VpcId

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'
                Resource: '*'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                Resource: '*'

Outputs:

  ECSClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'

  ContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'ContainerSecurityGroup'
